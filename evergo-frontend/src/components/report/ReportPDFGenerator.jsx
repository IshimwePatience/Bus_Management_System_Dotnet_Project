import { useState, useEffect } from 'react';

const ReportPDFGenerator = ({ reportType, reportData, startDate, endDate, companyName, generatedBy, generatedAt }) => {
  const [generating, setGenerating] = useState(false);
  const [jspdfLoaded, setJspdfLoaded] = useState(false);

  // Load jsPDF and jspdf-autotable from CDN
  useEffect(() => {
    const loadScripts = async () => {
      try {
        // Load jsPDF
        const jspdfScript = document.createElement('script');
        jspdfScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        jspdfScript.async = true;
        jspdfScript.onload = () => {
          // Load jspdf-autotable
          const autotableScript = document.createElement('script');
          autotableScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js';
          autotableScript.async = true;
          autotableScript.onload = () => {
            setJspdfLoaded(true);
          };
          document.body.appendChild(autotableScript);
        };
        document.body.appendChild(jspdfScript);
      } catch (error) {
        console.error('Error loading jsPDF or autotable scripts:', error);
      }
    };

    loadScripts();
  }, []);

  const generatePDF = () => {
    if (!reportData || !jspdfLoaded) {
      alert('PDF generation not ready. Please try again in a moment.');
      return;
    }

    setGenerating(true);

    try {
      // Access jsPDF and autoTable from the window object (loaded via CDN)
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();

      // Add title
      const title = reportType === 'bookingSummary' ? 'Booking Summary Report' :
                    reportType === 'driverPerformance' ? 'Driver Performance Report' :
                    reportType === 'busUtilization' ? 'Bus Utilization Report' :
                    'Upcoming Schedules Report';

      doc.setFontSize(18);
      doc.setTextColor(59, 130, 246); // Blue color
      doc.text(title, 105, 20, { align: 'center' });

      // Add metadata
      doc.setFontSize(11);
      doc.setTextColor(100);
      doc.text(`Company: ${companyName}`, 105, 30, { align: 'center' });
      doc.text(`Date Range: ${startDate} to ${endDate}`, 105, 36, { align: 'center' });
      doc.text(`Generated by: ${generatedBy}`, 105, 42, { align: 'center' });
      doc.text(`Generated at: ${generatedAt}`, 105, 48, { align: 'center' });

      // Log reportData for debugging
      console.log('Generating PDF for reportType:', reportType, 'with data:', reportData);

      // Add table based on report type
      if (reportType === 'bookingSummary' && !Array.isArray(reportData)) {
        // Booking Summary Report
        // Main metrics
        doc.autoTable({
          startY: 55,
          head: [['Metric', 'Value']],
          body: [
            ['Total Revenue', `$${reportData.totalRevenue || '0.00'}`],
            ['Number of Bookings', reportData.bookingCount || 0],
            ['Average Revenue per Booking', `$${reportData.averageRevenue || '0.00'}`]
          ],
          theme: 'grid',
          headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] }
        });

        // Payment Methods
        if (Array.isArray(reportData.paymentMethods) && reportData.paymentMethods.length > 0) {
          doc.autoTable({
            startY: doc.lastAutoTable.finalY + 10,
            head: [['Payment Method', 'Amount']],
            body: reportData.paymentMethods.map(row => [row.method || 'Unknown', `$${row.amount || '0.00'}`]),
            theme: 'grid',
            headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] }
          });
        }

        // Daily Breakdown
        if (Array.isArray(reportData.dailyBreakdown) && reportData.dailyBreakdown.length > 0) {
          doc.autoTable({
            startY: doc.lastAutoTable.finalY + 10,
            head: [['Date', 'Amount']],
            body: reportData.dailyBreakdown.map(row => [row.date || '-', `$${row.amount || '0.00'}`]),
            theme: 'grid',
            headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] }
          });
        }

      } else if (reportType === 'driverPerformance' && Array.isArray(reportData)) {
        // Driver Performance Report
        doc.autoTable({
          startY: 55,
          head: [['Driver Name', 'Trips Completed', 'Total Revenue']],
          body: reportData.map(row => [
            row.driverName || '-',
            row.trips || 0,
            `$${row.revenue || '0.00'}`
          ]),
          theme: 'grid',
          headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] },
          styles: { overflow: 'linebreak' },
          columnStyles: {
            0: { cellWidth: 'auto' },
            1: { cellWidth: 40 },
            2: { cellWidth: 40 }
          }
        });

      } else if (reportType === 'busUtilization' && Array.isArray(reportData)) {
        // Bus Utilization Report
        doc.autoTable({
          startY: 55,
          head: [['Bus Number', 'Trips', 'Total Revenue']],
          body: reportData.map(row => [
            row.busNumber || '-',
            row.trips || 0,
            `$${row.revenue || '0.00'}`
          ]),
          theme: 'grid',
          headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] },
          styles: { overflow: 'linebreak' },
          columnStyles: {
            0: { cellWidth: 'auto' },
            1: { cellWidth: 40 },
            2: { cellWidth: 40 }
          }
        });

      } else if (reportType === 'upcomingSchedules' && Array.isArray(reportData)) {
        // Upcoming Schedules Report
        doc.autoTable({
          startY: 55,
          head: [['Schedule ID', 'Route', 'Bus', 'Driver', 'Trip Date', 'Departure Time', 'Status']],
          body: reportData.map(row => [
            row.scheduleId || '-',
            row.routeName || '-',
            row.busNumber || '-',
            row.driverName || '-',
            row.tripDate || '-',
            row.departureTime || '-',
            row.status || '-'
          ]),
          theme: 'grid',
          headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] },
          styles: { overflow: 'linebreak' },
          columnStyles: {
            0: { cellWidth: 20 },
            1: { cellWidth: 'auto' },
            2: { cellWidth: 20 },
            3: { cellWidth: 30 },
            4: { cellWidth: 25 },
            5: { cellWidth: 30 },
            6: { cellWidth: 25 }
          }
        });
      } else {
        throw new Error('Invalid report data format for report type: ' + reportType);
      }

      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(9);
        doc.setTextColor(150);
        doc.text(`${companyName} - Page ${i} of ${pageCount}`, 105, doc.internal.pageSize.height - 10, { align: 'center' });
      }

      // Save the PDF
      doc.save(`${companyName.replace(/\s+/g, '_')}_${reportType}_${startDate}_to_${endDate}.pdf`);

    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF report: ' + error.message);
    } finally {
      setGenerating(false);
    }
  };

  return (
    <>
      {reportData && (
        <button
          onClick={generatePDF}
          disabled={generating || !jspdfLoaded}
          className={`${
            generating || !jspdfLoaded ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'
          } text-white px-6 py-2 rounded-md mt-4 transition-colors duration-200 shadow-sm flex items-center justify-center`}
        >
          {generating ? (
            <>
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating PDF...
            </>
          ) : !jspdfLoaded ? (
            'Loading PDF Generator...'
          ) : (
            'Generate PDF Report'
          )}
        </button>
      )}
    </>
  );
};

export default ReportPDFGenerator;